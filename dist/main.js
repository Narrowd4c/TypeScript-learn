"use strict";
let str;
let num;
let bool;
function fn(num = 12, str, bool) {
    console.log(num, str);
}
function fn2(t) {
    console.log(typeof t);
}
fn2("str");
const fn3 = (x) => typeof x;
// --- array ----
let arr = ["string", "str"];
let arrT = [1, 2, 3, 4, 5];
let arrStr = [["string"]];
let arrNum = [[1, "str1"], [2, "str2"]];
// --- tuple ---
// This is an array
let header = ['Name', 'Age', 'Smoking', 'Salary'];
// This is a tuple
let profile = ['Kobe', 39, true, 150000];
// profile[0] = 12; /* error */
let eventDate = ['January', '2'];
// This is an array
let newDate = ['January', '12'];
//eventDate = newDate
let tuple3 = ["str", 12, "rolling"];
let t = tuple3.concat([12, 33]);
// typeof t == (string|number)[]
console.log(typeof t);
// tuple3 dose not have type boolean, concat will print error
//let t = tuple3.concat(['false', 'night', true])
//--- Rest Parameter ---
function fn4(...para) {
    para.forEach(x => { console.log(x); });
}
fn4(1, 2, 3, 4, 5, 6);
//--- Spread ---
let aryNum = [1, 2, 3];
function sum(num, num1, num2) {
    console.log(num + num1 + num2);
}
let m = Math.max(...aryNum);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLEdBQVcsQ0FBQztBQUNoQixJQUFJLEdBQVcsQ0FBQztBQUNoQixJQUFJLElBQWEsQ0FBQztBQUVsQixTQUFTLEVBQUUsQ0FBQyxNQUFhLEVBQUUsRUFBRSxHQUFXLEVBQUUsSUFBYTtJQUNuRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtBQUN6QixDQUFDO0FBRUQsU0FBUyxHQUFHLENBQUksQ0FBSTtJQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFDekIsQ0FBQztBQUVELEdBQUcsQ0FBUyxLQUFLLENBQUMsQ0FBQTtBQUVsQixNQUFNLEdBQUcsR0FBRyxDQUFJLENBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUE7QUFHakMsaUJBQWlCO0FBRWpCLElBQUksR0FBRyxHQUFhLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBQ3JDLElBQUksSUFBSSxHQUFrQixDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtBQUNyQyxJQUFJLE1BQU0sR0FBZSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtBQUVyQyxJQUFJLE1BQU0sR0FBdUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBRTNELGdCQUFnQjtBQUVoQixtQkFBbUI7QUFDbkIsSUFBSSxNQUFNLEdBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM1RCxrQkFBa0I7QUFDbEIsSUFBSSxPQUFPLEdBQXNDLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFFNUUsK0JBQStCO0FBRS9CLElBQUksU0FBUyxHQUFxQixDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUVuRCxtQkFBbUI7QUFDbkIsSUFBSSxPQUFPLEdBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFMUMscUJBQXFCO0FBRXJCLElBQUksTUFBTSxHQUE2QixDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFFOUQsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQy9CLGdDQUFnQztBQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFFckIsNkRBQTZEO0FBQzdELGlEQUFpRDtBQUVqRCx3QkFBd0I7QUFDeEIsU0FBUyxHQUFHLENBQUMsR0FBRyxJQUFhO0lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUE7QUFDeEMsQ0FBQztBQUVELEdBQUcsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0FBRWhCLGdCQUFnQjtBQUVoQixJQUFJLE1BQU0sR0FBYSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFaEMsU0FBUyxHQUFHLENBQUMsR0FBVSxFQUFFLElBQVcsRUFBRSxJQUFXO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQTtBQUNsQyxDQUFDO0FBRUQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBIn0=